---
# one_server_upgrade tasks file for veeamhub.veeam_vas
## ONE Monitor Server
- name: Checking to see if Veeam ONE Monitor Server is installed
  veeam_software_check:
    name: "Veeam ONE Monitor Server"
  register: monitor_server
- name: Is Veeam ONE Monitor Server installed?
  fail:
    msg: "Veeam ONE Monitor Server must be installed on this server in order to upgrade it."
  when: not (monitor_server.installed | bool)
## ONE Reporter Server
- name: Checking to see if Veeam ONE Reporter Server is installed
  veeam_software_check:
    name: "Veeam ONE Reporter Server"
  register: reporter_server
- name: Is Veeam ONE Reporter Server installed?
  fail:
    msg: "Veeam ONE Reporter Server must be installed on this server in order to upgrade it."
  when: not (reporter_server.installed | bool)
## ONE Agent Server
- name: Checking to see if Veeam ONE Agent is installed
  veeam_software_check:
    name: "Veeam ONE Agent"
  register: agent_server
- name: Is Veeam ONE Agent installed?
  fail:
    msg: "Veeam ONE Agent must be installed on this server in order to upgrade it."
  when: not (agent_server.installed | bool)
- name: Including version-specific variables
  include_vars:
    file: "vars/one_v{{ version }}.yml"

# PRE-UPGRADE TASKS
- name: Veeam ONE ISO Tasks
  include_tasks: mount_iso.yml
- name: Print Upgrade Configuration
  debug:
    msg:
      - "ISO Drive Letter: '{{ source }}'"
      - "Upgrade Logs Folder: '{{ destination }}logs'"
      - "Version: {{ version }}"
      - "Download ISO?: {{ iso_download }}"
      - "ISO Source: {{ iso_url }}"
      - "ISO File Destination: {{ destination }}{{ destination_iso_file }}"
      - "Use license?: {{ license }}"
      - "License Source: {{ source_license }}"
      - "License File Destination: {{ destination }}{{ destination_license_file }}"
      - "Veeam ONE Service Account: {{ one_username | default('not specified') }}"
- name: Create logs directory
  ansible.windows.win_file:
    path: "{{ destination }}logs"
    state: directory
- name: Copy license file
  ansible.windows.win_copy:
    src: "{{ source_license }}"
    dest: "{{ destination }}{{ destination_license_file }}"
  when: license | bool
- name: Stopping all Veeam services prior to upgrade
  ansible.windows.win_shell: |
    Get-Service veeam* | Stop-Service -Force
- name: Ensure the required NuGet package provider version is installed
  ansible.windows.win_shell: |
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    Find-PackageProvider -Name Nuget -ForceBootstrap -IncludeDependencies -Force
  when: sql_instance != '(local)\\VEEAMSQL2016'
- name: Installing SqlServer PowerShell module
  community.windows.win_psmodule:
    name: SqlServer
    skip_publisher_check: yes
    state: present
  register: result
  until: result is not failed
  retries: 1  # allows PowerShellGet to be upgraded if needed
  when: sql_instance != '(local)\\VEEAMSQL2016'
- name: Start adhoc Veeam ONE database backup to default SQL backup location
  ansible.windows.win_shell: |
    Backup-SqlDatabase -ServerInstance "{{ sql_instance }}" -Database "{{ sql_database }}"
  become: yes
  become_flags: logon_type=batch
  vars:
    ansible_become_method: runas
    ansible_become_user: "{{ one_username }}"
    ansible_become_pass: "{{ one_password }}"
- name: Including Veeam ONE Common Pre-Install tasks
  include_tasks: one_install_pretasks.yml

# UPGRADING VEEAM SOFTWARE
## ONE Monitor Server
- name: Upgrade ONE Monitor Server with license file (v12+)
  ansible.windows.win_package:
    path: "{{ source }}Monitor\\VeeamONE.Monitor.Server.x64.msi"
    state: present
    arguments: '/L*v "{{ destination }}logs\VeeamONE.Monitor.Server.x64.log" EDITLICFILEPATH="{{ destination }}{{ destination_license_file }}" ACCEPT_THIRDPARTY_LICENSES=1 ACCEPT_EULA=1 ACCEPT_LICENSING_POLICY=1 ACCEPT_REQUIRED_SOFTWARE=1 VM_MN_SERVICEACCOUNT="{{ one_username }}" VM_MN_SERVICEPASSWORD="{{ one_password }}"'
  when:
    - license | bool
    - version | int >= 12
- name: Upgrade ONE Monitor Server without license file (v12+)
  ansible.windows.win_package:
    path: "{{ source }}Monitor\\VeeamONE.Monitor.Server.x64.msi"
    state: present
    arguments: '/L*v "{{ destination }}logs\VeeamONE.Monitor.Server.x64.log" ACCEPT_THIRDPARTY_LICENSES=1 ACCEPT_EULA=1 ACCEPT_LICENSING_POLICY=1 ACCEPT_REQUIRED_SOFTWARE=1 VM_MN_SERVICEACCOUNT="{{ one_username }}" VM_MN_SERVICEPASSWORD="{{ one_password }}"'
  when:
    - not (license | bool)
    - version | int >= 12
- name: Upgrade ONE Monitor Server with license file (v11-)
  ansible.windows.win_package:
    path: "{{ source }}Monitor\\VeeamONE.Monitor.Server.x64.msi"
    state: present
    arguments: '/L*v "{{ destination }}logs\VeeamONE.Monitor.Server.x64.log" EDITLICFILEPATH="{{ destination }}{{ destination_license_file }}" ACCEPT_THIRDPARTY_LICENSES=1 ACCEPT_EULA=1 VM_MN_SERVICEACCOUNT="{{ one_username }}" VM_MN_SERVICEPASSWORD="{{ one_password }}"'
  when:
    - license | bool
    - version | int <= 11
- name: Upgrade ONE Monitor Server without license file (v11-)
  ansible.windows.win_package:
    path: "{{ source }}Monitor\\VeeamONE.Monitor.Server.x64.msi"
    state: present
    arguments: '/L*v "{{ destination }}logs\VeeamONE.Monitor.Server.x64.log" ACCEPT_THIRDPARTY_LICENSES=1 ACCEPT_EULA=1 VM_MN_SERVICEACCOUNT="{{ one_username }}" VM_MN_SERVICEPASSWORD="{{ one_password }}"'
  when:
    - not (license | bool)
    - version | int <= 11
## ONE Reporter Server
- name: Upgrade ONE Reporter Server with license file (v12+)
  ansible.windows.win_package:
    path: "{{ source }}Reporter\\VeeamONE.Reporter.Server.x64.msi"
    state: present
    arguments: '/L*v "{{ destination }}logs\VeeamONE.Reporter.Server.x64.log" EDITLICFILEPATH="{{ destination }}{{ destination_license_file }}" ACCEPT_THIRDPARTY_LICENSES=1 ACCEPT_EULA=1 ACCEPT_LICENSING_POLICY=1 ACCEPT_REQUIRED_SOFTWARE=1 VO_REPORTER_SERVICE_ACCOUNT_NAME="{{ one_username }}" VO_REPORTER_SERVICE_ACCOUNT_PASSWORD="{{ one_password }}"'
  become: yes
  become_flags: logon_type=batch
  vars:
    ansible_become_method: runas
    ansible_become_user: "{{ one_username }}"
    ansible_become_pass: "{{ one_password }}"
  when:
    - license | bool
    - version | int >= 12
- name: Upgrade ONE Reporter Server without license file (v12+)
  ansible.windows.win_package:
    path: "{{ source }}Reporter\\VeeamONE.Reporter.Server.x64.msi"
    state: present
    arguments: '/L*v "{{ destination }}logs\VeeamONE.Reporter.Server.x64.log" ACCEPT_THIRDPARTY_LICENSES=1 ACCEPT_EULA=1 ACCEPT_LICENSING_POLICY=1 ACCEPT_REQUIRED_SOFTWARE=1 VO_REPORTER_SERVICE_ACCOUNT_NAME="{{ one_username }}" VO_REPORTER_SERVICE_ACCOUNT_PASSWORD="{{ one_password }}"'
  become: yes
  become_flags: logon_type=batch
  vars:
    ansible_become_method: runas
    ansible_become_user: "{{ one_username }}"
    ansible_become_pass: "{{ one_password }}"
  when:
    - not (license | bool)
    - version | int >= 12
- name: Upgrade ONE Reporter Server with license file (v11)
  ansible.windows.win_package:
    path: "{{ source }}Reporter\\VeeamONE.Reporter.Server.x64.msi"
    state: present
    arguments: '/L*v "{{ destination }}logs\VeeamONE.Reporter.Server.x64.log" EDITLICFILEPATH="{{ destination }}{{ destination_license_file }}" ACCEPT_THIRDPARTY_LICENSES=1 ACCEPT_EULA=1 VO_REPORTER_SERVICE_ACCOUNT_NAME="{{ one_username }}" VO_REPORTER_SERVICE_ACCOUNT_PASSWORD="{{ one_password }}"'
  become: yes
  become_flags: logon_type=batch
  vars:
    ansible_become_method: runas
    ansible_become_user: "{{ one_username }}"
    ansible_become_pass: "{{ one_password }}"
  when:
    - license | bool
    - version | int == 11
- name: Upgrade ONE Reporter Server without license file (v11)
  ansible.windows.win_package:
    path: "{{ source }}Reporter\\VeeamONE.Reporter.Server.x64.msi"
    state: present
    arguments: '/L*v "{{ destination }}logs\VeeamONE.Reporter.Server.x64.log" ACCEPT_THIRDPARTY_LICENSES=1 ACCEPT_EULA=1 VO_REPORTER_SERVICE_ACCOUNT_NAME="{{ one_username }}" VO_REPORTER_SERVICE_ACCOUNT_PASSWORD="{{ one_password }}"'
  become: yes
  become_flags: logon_type=batch
  vars:
    ansible_become_method: runas
    ansible_become_user: "{{ one_username }}"
    ansible_become_pass: "{{ one_password }}"
  when:
    - not (license | bool)
    - version | int == 11
- name: Upgrade ONE Reporter Server with license file (pre-v11)
  ansible.windows.win_package:
    path: "{{ source }}Reporter\\VeeamONE.Reporter.Server.x64.msi"
    state: present
    arguments: '/L*v "{{ destination }}logs\VeeamONE.Reporter.Server.x64.log" EDITLICFILEPATH="{{ destination }}{{ destination_license_file }}" ACCEPT_THIRDPARTY_LICENSES=1 ACCEPT_EULA=1 VM_RP_SERVICEACCOUNT="{{ one_username }}" VM_RP_SERVICEPASSWORD="{{ one_password }}"'
  when:
    - license | bool
    - version | int < 11
- name: Upgrade ONE Reporter Server without license file (pre-v11)
  ansible.windows.win_package:
    path: "{{ source }}Reporter\\VeeamONE.Reporter.Server.x64.msi"
    state: present
    arguments: '/L*v "{{ destination }}logs\VeeamONE.Reporter.Server.x64.log" ACCEPT_THIRDPARTY_LICENSES=1 ACCEPT_EULA=1 VM_RP_SERVICEACCOUNT="{{ one_username }}" VM_RP_SERVICEPASSWORD="{{ one_password }}"'
  when:
    - not (license | bool)
    - version | int < 11
## ONE Agent Server
- name: Upgrade ONE Agent Server (v12+)
  ansible.windows.win_package:
    path: "{{ source }}Agent\\VeeamONE.Agent.x64.msi"
    state: present
    arguments: '/L*v "{{ destination }}logs\VeeamONE.Agent.x64.log" ACCEPT_THIRDPARTY_LICENSES=1 ACCEPT_EULA=1 ACCEPT_LICENSING_POLICY=1 ACCEPT_REQUIRED_SOFTWARE=1 VO_AGENT_SERVICE_ACCOUNT_NAME="{{ one_username }}" VO_AGENT_SERVICE_ACCOUNT_PASSWORD="{{ one_password }}"'
  when: version | int >= 12
- name: Upgrade ONE Agent Server (v11-)
  ansible.windows.win_package:
    path: "{{ source }}Agent\\VeeamONE.Agent.x64.msi"
    state: present
    arguments: '/L*v "{{ destination }}logs\VeeamONE.Agent.x64.log" ACCEPT_THIRDPARTY_LICENSES=1 ACCEPT_EULA=1 VO_AGENT_SERVICE_ACCOUNT_NAME="{{ one_username }}" VO_AGENT_SERVICE_ACCOUNT_PASSWORD="{{ one_password }}"'
  when: version | int <= 11
- name: Finding file(s) in '{{ source }}Updates' directory
  ansible.windows.win_find:
    paths: "{{ source }}Updates"
    recurse: no
    file_type: file
  ignore_errors: yes
  register: file
- name: Does Veeam ONE need to be patched?
  set_fact:
    patch: "{{ file.matched }}"
- name: Setting patch filename
  set_fact:
    patch_file: "{{ file.files[0].filename }}"
  when: patch | bool
- name: Including Veeam ONE patch tasks
  include_tasks: one_patch.yml
  when: patch | bool

# POST-UPGRADE TASKS
- name: Starting all Veeam services post-upgrade
  ansible.windows.win_shell: |
    Get-Service veeam* | Start-Service
- name: Unmount ISO
  community.windows.win_disk_image:
    image_path: "{{ destination }}{{ destination_iso_file }}"
    state: absent
