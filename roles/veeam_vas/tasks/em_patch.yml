# em_patch tasks file for veeamhub.veeam_vas

## PRE-INSTALL TASKS
- name: Including version-specific variables
  include_vars:
    file: "vars/em_v{{ version }}.yml"
  when: not (patch | bool)
- name: Setting patch folder (from ISO)
  set_fact:
    patch_folder: "Updates\\"
  when: patch | bool
- name: Setting patch folder (not from ISO)
  set_fact:
    patch_folder: ""
  when: not (patch | bool)
- name: Print Patch Configuration
  debug:
    msg:
      - "ISO Drive Letter: '{{ source }}{{ patch_folder }}{{ patch_file }}'"
      - "Patch Logs Folder: '{{ destination }}logs'"
      - "SQL Instance: {{ sql_instance }}"
      - "SQL Database: {{ sql_database }}"
      - "SQL Connection Account: {{ sql_username }}"
- name: Create logs directory
  ansible.windows.win_file:
    path: "{{ destination }}logs"
    state: directory
  when: not (patch | bool)
- name: Stopping all Veeam services prior to applying EM patch
  ansible.windows.win_shell: |
    Stop-Process -Name "Veeam.Backup.Shell" -Force -ErrorAction SilentlyContinue
    Get-Service veeam* | Stop-Service
- name: Ensure the required NuGet package provider version is installed
  ansible.windows.win_shell: |
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    Find-PackageProvider -Name Nuget -ForceBootstrap -IncludeDependencies -Force
  when:
    - sql_instance != '(local)\\VEEAMSQL2016'
    - not (patch | bool)
- name: Installing SqlServer PowerShell module
  community.windows.win_psmodule:
    name: SqlServer
    skip_publisher_check: yes
    state: present
  register: result
  until: result is not failed
  retries: 1  # allows PowerShellGet to be upgraded if needed
  when:
    - sql_instance != '(local)\\VEEAMSQL2016'
    - not (patch | bool)
- name: Start adhoc EM database backup
  ansible.windows.win_shell: |
    $secureString = ConvertTo-SecureString "{{ sql_password }}" -AsPlainText -Force
    $credential = New-Object System.Management.Automation.PSCredential ("{{ sql_username }}", $secureString)
    Backup-SqlDatabase -ServerInstance "{{ sql_instance }}" -Database "{{ sql_database }}" -Credential $credential
  no_log: true
  when: not (patch | bool)

## INSTALLING PATCH
- name: Install EM patch
  ansible.windows.win_package:
    path: "{{ source }}{{ patch_folder }}{{ patch_file }}"
    product_id: "Veeam Backup Enterprise Manager Update"
    arguments: '/log "{{ destination }}logs\\{{ patch_file }}.log" /silent /noreboot'
  register: patch_results

## POST-INSTALL TASKS
- name: Starting all Veeam services
  ansible.windows.win_shell: |
    Get-Service veeam* | Where-Object {$_.Name -ne "VeeamMBPDeploymentService"} | Start-Service
- name: Stopping all Veeam services
  ansible.windows.win_shell: |
    Get-Service veeam* | Stop-Service
  when: not (patch | bool)
- name: Rebooting server now to complete EM patch installation
  ansible.windows.win_reboot:
    msg: Reboot initiated by Ansible to complete EM patch installation
  when:
    - not (patch | bool)
